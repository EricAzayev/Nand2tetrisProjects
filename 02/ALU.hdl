// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    //You carry out the processes normally with pre-built gates.
    //Then, you use MUX gates to choose your opperations.

    //Mux4Way16(a=x,b=notx, c[0..15] = false, d[0..15] = true, sel[1] = zy,sel[0]=noty,out=b);
    //ZX and ZY inputs
    Mux16(a=x, b[0..15]=false, sel = zx, out=xMux);
    Mux16(a=y, b[0..15]=false, sel = zy, out = yMux);

    //NX and NY flag
    Not16(in=xMux, out=notX);
    Not16(in=yMux, out=notY);

    Mux16(a=xMux,b=notX, sel=nx, out = processedX);  //Order of ZX and NX is interchangeable. This is processing.
    Mux16(a=yMux,b=notY, sel=ny, out=processedY) ;

    //F flag
    And16(a=processedX, b=processedY, out= fFirstOut);
    Add16(a=processedX, b=processedY, out = fSecondOut);
    Mux16(a = fFirstOut, b = fSecondOut, sel = f, out = ZNFMux);

    //NO flag
    Not16(in=ZNFMux, out=fNotOut);
    Mux16(a = ZNFMux, b = fNotOut, sel = no, out = out, out[15] = ng, out[0..7] = zrLow, out[8..15] = zrHigh);

    //ZR flag
    Or8Way(in = zrLow, out = or1out);
    Or8Way(in = zrHigh, out = or2out);
    Or(a=or1out, b=or2out, out= or3out);
    Not(in = or3out, out=zr);

}